#!/usr/bin/python

from common import *
import sys
import socket
import random
import time
import signal

def tooslow(signum, frame):
	print "Timeout"
	sys.exit(-1)

class ombdsu:

	def __init__(self, ip, port=502):
		self.debug = 0

		self.TransID = random.randint(1,255)
		self.UnitID = random.randint(1,255)

		self.READ_COILS                  = 0x01
		self.WRITE_SINGLE_COIL           = 0x05
		self.WRITE_SINGLE_REGISTER       = 0x06
		self.WRITE_MULTIPLE_COIL         = 0x0f
		self.WRITE_MULTIPLE_REGISTERS    = 0x10
		self.READ_FILE_RECORD            = 0x14
		
		self.SUCCESS      = 0x0
		self.INVALID_FUNC = 0x1
		self.INVALID_ADDR = 0x2
		self.INVALID_DATA = 0x3
		self.EXEC_FAIL    = 0x4

		self.sock = 0
		self.TargetIP = ""
		self.Skip_Test_Threshold = 0.2
		self.Test_Failure_Threshold = 0.2

		self.Connect(ip,port)
		self.OneRun = 0

	def DidOneRun(self):
		return self.OneRun

	def Connect(self, ip, port):
		try:
			self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
			self.sock.connect((ip, 502))
		except socket.error, (value,message):
			if self.sock:
				self.sock.close()
			print "Failed to connect: " + message
			sys.exit(-1)

		self.TargetIP = ip

	def Test_Single_Coil_Write(self):

		# randomly choose to run this test
		if random.random() < self.Skip_Test_Threshold:
			return
		self.OneRun += 1

		if self.debug: print "Test_Single_Coil_Write"
	
		# start off assuming this request will succeed
		# expected response code
		erc = self.SUCCESS

		# Coil Address
		if random.random() < self.Test_Failure_Threshold:
			# choose a bad (read-only) coil addr to write
			CoilAddress = random.randint(0, 8191)
			erc = self.INVALID_ADDR
		else:
			# choose a good coil addr to write
			CoilAddress = random.randint(8192, 16383)

		# Coil value
		if erc == self.SUCCESS:
			if random.random() < self.Test_Failure_Threshold:
				# choose a bad value to write
				Value = random.choice([0x0ff0,0xf000,0x000f,0x0f00, 0x00f0])
				erc = self.INVALID_DATA
			else:
				# choose a good coil addr to write
				Value = random.choice([0x0000,0xff00])
		else:
			# choose a good coil addr to write
			Value = random.choice([0x0000,0xff00])

		Write_Single_Coil(self.sock, self.TransID, self.UnitID, CoilAddress, Value)
		resp = Read_Response(self.sock)
		if erc == self.SUCCESS:
			# we were expecting a success, did we get it?
			if ord(resp[1]) != self.WRITE_SINGLE_COIL:
				print "Test_Single_Coil_Write failed: Received function code 0x{:02x} expected 0x05".format(ord(resp[1]))
				sys.exit(-1)
		else:
			# we were expecting a failure, did we get it?
			if ord(resp[1]) != self.WRITE_SINGLE_COIL+0x80:
				print "Test_Single_Coil_Write failed: Received function code 0x{:02x} expected {:02x}".format(ord(resp[1]), self.WRITE_SINGLE_COIL+0x80)
				sys.exit(-1)

			# make sure the exception code is correct
			if ord(resp[2]) != erc:
				print "Test_Single_Coil_Write failed: Received exception code 0x{:02x} expected {:02x}".format(ord(resp[1]), erc)
				sys.exit(-1)

		# no point in trying to read something we know we didn't write
		if erc != self.SUCCESS:
			return

		# read back what we wrote 
		Read_Coils(self.sock, self.TransID, self.UnitID, CoilAddress, 1)
		resp = Read_Response(self.sock)

		# was the response a failure?
		if ord(resp[1]) > 0x80:
			print "Test_Single_Coil_Write failed: Read_Coils failed with 0x{:02x} exception code 0x{:02x}".format(ord(resp[1]), ord(resp[2]))
			sys.exit(-1)
	
		if Value == 0x0000:
			if ord(resp[3]) != 0:
				print "Test_Single_Coil_Write failed: Read value 0x{:02x} doesn't match written value 0".format(ord(resp[3]))
				sys.exit(-1)
		if Value == 0xff00:
			if ord(resp[3]) != 1:
				print "Test_Single_Coil_Write failed: Read value 0x{:02x} doesn't match written value 1".format(ord(resp[3]))
				sys.exit(-1)


	def Test_Multiple_Coil_Write(self):

		# randomly choose to run this test
		if random.random() < self.Skip_Test_Threshold:
			return
		self.OneRun += 1

		if self.debug: print "Test_Multiple_Coil_Write"
	
		# start off assuming this request will succeed
		# expected response code
		erc = self.SUCCESS

		# Coil Address
		if random.random() < self.Test_Failure_Threshold:
			# choose a bad (read-only) coil addr to write
			StartingAddress = random.randint(0, 8191)
			erc = self.INVALID_ADDR
		else:
			# choose a good coil addr to write
			StartingAddress = random.randint(8193, 16382)

		# Number of coils to write
		if erc == self.SUCCESS:
			if random.random() < self.Test_Failure_Threshold:
				# choose a bad coil
				if 16382-StartingAddress > 0x7b0:
					# too far from the end of the memory buffer
					# to choose a bad QuantityCoils, so adjust
					# StartingAddress
					StartingAddress = random.randint(15400, 16383)
					QuantityCoils = random.randint(985,1968)
				else:
					QuantityCoils = random.randint(16384-StartingAddress,1968)
				erc = self.INVALID_ADDR
			else:
				# choose a good coil addr
				QuantityCoils = 0
				while QuantityCoils < 1 or QuantityCoils > 1968:
					QuantityCoils = random.randint(1, 16383-StartingAddress)
		else: 
			# choose a good coil addr
			QuantityCoils = 0
			while QuantityCoils < 1 or QuantityCoils > 1968:
				QuantityCoils = random.randint(1, 16383-StartingAddress)

		# Coil values
		NumBytes = QuantityCoils/8
		if QuantityCoils % 8 != 0:
			NumBytes+=1
			ClearBits = 0
			for i in range (0, QuantityCoils % 8):
				ClearBits << 1
				ClearBits |= 0x1
		#Values = [chr(random.randint(0,255)) for i in range(0, NumBytes)]
		RandChar = random.choice([0x41,0x61])
		Values = [chr(RandChar) for i in range(0, NumBytes)]
		if QuantityCoils % 8 != 0:
			Values[NumBytes-1] = chr(ord(Values[NumBytes-1]) & ClearBits)
		Values = "".join(Values)

		if self.debug: print "   {} {} {}".format(StartingAddress,QuantityCoils, len(Values))
		Write_Multiple_Coils(self.sock, self.TransID, self.UnitID, StartingAddress, QuantityCoils, Values)
		resp = Read_Response(self.sock)
		if erc == self.SUCCESS:
			# we were expecting a success, did we get it?
			if ord(resp[1]) != self.WRITE_MULTIPLE_COIL:
				print "Test_Multiple_Coil_Write failed: Received function code 0x{:02x} expected 0x{:02x}, exception code 0x{:02x}".format(ord(resp[1]), self.WRITE_MULTIPLE_COIL, ord(resp[2]))
				sys.exit(-1)
		else:
			# we were expecting a failure, did we get it?
			if ord(resp[1]) != self.WRITE_MULTIPLE_COIL+0x80:
				print "Test_Multiple_Coil_Write failed: Received function code 0x{:02x} expected 0x{:02x}, exception code 0x{:02x}".format(ord(resp[1]), self.WRITE_MULTIPLE_COIL+0x80, ord(resp[2]))
				sys.exit(-1)

			# make sure the exception code is correct
			if ord(resp[2]) != erc:
				print "Test_Multiple_Coil_Write failed: Received exception code 0x{:02x} expected 0x{:02x}".format(ord(resp[2]), erc)
				sys.exit(-1)

		# no point in trying to read something we know we didn't write
		if erc != self.SUCCESS:
			return

		# read back what we wrote 
		Read_Coils(self.sock, self.TransID, self.UnitID, StartingAddress, QuantityCoils)
		resp = Read_Response(self.sock)

		RespValues = resp[3:]

		# was the response a failure?
		if ord(resp[1]) > 0x80:
			print "Test_Multiple_Coil_Write failed: Read_Coils failed with 0x{:02x} exception code 0x{:02x}".format(ord(resp[1]), ord(resp[2]))
			sys.exit(-1)
	
		if Values != RespValues:
			print "Test_Multiple_Coil_Write failed: Written values didn't match read values"
			print "Values:     " + ":".join("{:02x}".format(ord(c)) for c in Values)
			print "RespValues: " + ":".join("{:02x}".format(ord(c)) for c in RespValues)
			sys.exit(-1)


	
	def Test_Write_Multiple_Registers(self):

		# randomly choose to run this test
		if random.random() < self.Skip_Test_Threshold:
			return
		self.OneRun += 1

		if self.debug: print "Test_Write_Multiple_Registers"
	
		# start off assuming this request will succeed
		# Expected Response Code
		erc = self.SUCCESS

		# Starting Register
		if random.random() < self.Test_Failure_Threshold:
			# choose a bad (read-only) register to write
			StartingReg = 768
			while StartingReg >= 768 and StartingReg <= 1024:
				StartingReg = random.randint(0, 65535)

			erc = self.INVALID_ADDR
		else:
			# choose a good register to write
			StartingReg = random.randint(768, 1023)

		# Number of Registers
		if erc == self.SUCCESS:
			if random.random() < self.Test_Failure_Threshold:
				# choose a bad value to write
				NumReg = 0
				while NumReg >= 1024-StartingReg and NumReg <= 1024-StartingReg:
					NumReg = random.randint(0,123)
				erc = self.INVALID_ADDR
			else:
				# choose a good number of registers to write
				NumReg = 1024
				while NumReg > 123:
					NumReg = random.randint(1, 1024-StartingReg)
		else:
			# choose a good coil addr to write
			NumReg = random.randint(1, 2)

		# values
		#Values = [random.randint(1,65535) for i in range(NumReg)]
		RandChar = random.choice([0x4141, 0x6161])
		Values = [RandChar for i in range(NumReg)]

		if self.debug: print "   {} {}".format(StartingReg,NumReg)
		Write_Multiple_Registers(self.sock, self.TransID, self.UnitID, StartingReg, NumReg, Values)
		resp = Read_Response(self.sock)
		if erc == self.SUCCESS:
			# we were expecting a success, did we get it?
			if ord(resp[1]) != self.WRITE_MULTIPLE_REGISTERS:
				print "Test_Write_Multiple_Registers failed: Received function code 0x{:02x} expected 0x{:02x}".format(ord(resp[1]), self.WRITE_MULTIPLE_REGISTERS)
				sys.exit(-1)
		else:
			# we were expecting a failure, did we get it?
			if ord(resp[1]) != self.WRITE_MULTIPLE_REGISTERS+0x80:
				print "Test_Write_Multiple_Registers failed: Received function code 0x{:02x} expected 0x{:02x}".format(ord(resp[1]), self.WRITE_MULTIPLE_REGISTERS+0x80)
				sys.exit(-1)

			# make sure the exception code is correct
			if ord(resp[2]) != erc:
				print "Test_Write_Multiple_Registers failed: Received exception code 0x{:02x} expected {:02x}".format(ord(resp[1]), erc)
				sys.exit(-1)

		# no point in trying to read something we know we didn't write
		if erc != self.SUCCESS:
			return

		# read back what we wrote 
		Read_Registers(self.sock, self.TransID, self.UnitID, StartingReg, NumReg)
		resp = Read_Response(self.sock)

		# was the response a failure?
		if ord(resp[1]) > 0x80:
				print "Test_Write_Multiple_Registers failed: Read_Registers failed with 0x{:02x} exception code 0x{:02x}".format(ord(resp[1]), ord(resp[2]))
				sys.exit(-1)
	
		RespValues = [unpack("<H", resp[i:i+2])[0] for i in range(3, len(resp), 2)]

		if Values != RespValues:
			if ord(resp[3]) != 0:
				print "Test_Write_Multiple_Registers failed: Written values didn't match read values"
				sys.exit(-1)


	def Test_Write_Single_Register(self):

		# randomly choose to run this test
		if random.random() < self.Skip_Test_Threshold:
			return
		self.OneRun += 1

		if self.debug: print "Test_Write_Single_Register"
	
		# start off assuming this request will succeed
		# Expected Response Code
		erc = self.SUCCESS

		# Starting Register
		if random.random() < self.Test_Failure_Threshold:
			# choose a bad (read-only) register to write
			RegisterAddress = 768
			while RegisterAddress >= 768 and RegisterAddress <= 1024:
				RegisterAddress = random.randint(0, 65535)

			erc = self.INVALID_ADDR
		else:
			# choose a good register to write
			RegisterAddress = random.randint(768, 1023)

		# value
		Value = random.randint(1,65535)

		if self.debug: print "   {} {}".format(RegisterAddress,1)
		Write_Single_Register(self.sock, self.TransID, self.UnitID, RegisterAddress, Value)
		resp = Read_Response(self.sock)
		if erc == self.SUCCESS:
			# we were expecting a success, did we get it?
			if ord(resp[1]) != self.WRITE_SINGLE_REGISTER:
				print "Test_Write_Single_Register failed: Received function code 0x{:02x} expected 0x{:02x}".format(ord(resp[1]), self.WRITE_SINGLE_REGISTER)
				sys.exit(-1)
		else:
			# we were expecting a failure, did we get it?
			if ord(resp[1]) != self.WRITE_SINGLE_REGISTER+0x80:
				print "Test_Write_Single_Register failed: Received function code 0x{:02x} expected 0x{:02x}".format(ord(resp[1]), self.WRITE_SINGLE_REGISTER+0x80)
				sys.exit(-1)

			# make sure the exception code is correct
			if ord(resp[2]) != erc:
				print "Test_Write_Single_Register failed: Received exception code 0x{:02x} expected {:02x}".format(ord(resp[1]), erc)
				sys.exit(-1)

		# no point in trying to read something we know we didn't write
		if erc != self.SUCCESS:
			return

		# read back what we wrote 
		Read_Registers(self.sock, self.TransID, self.UnitID, RegisterAddress, 1)
		resp = Read_Response(self.sock)

		# was the response a failure?
		if ord(resp[1]) > 0x80:
				print "Test_Write_Single_Register failed: Read_Registers failed with 0x{:02x} exception code 0x{:02x}".format(ord(resp[1]), ord(resp[2]))
				sys.exit(-1)
	
		RespValue = unpack(">H", resp[3:5])[0]

		if Value != RespValue:
			if ord(resp[3]) != 0:
				print "Test_Write_Single_Register failed: Written values didn't match read values"
				print "Value: " + str(Value)
				print "RespValue: " + str(RespValue)
				sys.exit(-1)


	def Test_File_Read(self):

		# randomly choose to run this test
		if random.random() < self.Skip_Test_Threshold:
			return
		self.OneRun += 1

		if self.debug: print "Test_File_Read"
	
		# start off assuming this request will succeed
		# Expected Response Code
		erc = self.SUCCESS

		# three files are defined in the service, pick one
		if random.random() < self.Test_Failure_Threshold:
			# read a bad file num
			FileNum = random.randint(4,10)
			erc = self.INVALID_ADDR
		else:
			# read a good file num
			FileNum = random.randint(1,3)

		# read in from our cache what we expect for that file
		CacheFileContents = "Garbage"
		if erc == self.SUCCESS:
			CacheFileName = self.TargetIP + "-file" + str(FileNum)
			try:
				f = open(CacheFileName, 'r')
			except:
				print "   Cache file " + CacheFileName + " missing...can't run this test through no fault of the team."
				return
			CacheFileContents = f.read()
			f.close()

		# What file record should we start reading
		StartingRecordNum = random.randint(0, (len(CacheFileContents)/2)-1)
		
		# How much do we want to read
		RecordLen = random.randint(1, (len(CacheFileContents)/2)-StartingRecordNum+1)

		Read_File_Record(self.sock, self.TransID, self.UnitID, FileNum, StartingRecordNum, RecordLen)
		resp = Read_Response(self.sock)

		if erc == self.SUCCESS:
			# we were expecting a success, did we get it?
			if ord(resp[1]) != self.READ_FILE_RECORD:
				print "Test_File_Read failed: Received function code 0x{:02x} expected 0x{:02x}".format(ord(resp[1]), self.READ_FILE_RECORD)
				sys.exit(-1)
		else:
			# we were expecting a failure, did we get it?
			if ord(resp[1]) != self.READ_FILE_RECORD+0x80:
				print "Test_File_Read failed: Received function code 0x{:02x} expected 0x{:02x}".format(ord(resp[1]), self.READ_FILE_RECORD+0x80)
				sys.exit(-1)

			# make sure the exception code is correct
			if ord(resp[2]) != erc:
				print "Test_File_Read failed: Received exception code 0x{:02x} expected {:02x}".format(ord(resp[1]), erc)
				sys.exit(-1)

		# see if the received bytes match what we expected
		# if the string length is odd, we need to tack on a '\x00' since registers are 2-bytes long
		if len(CacheFileContents[StartingRecordNum*2:StartingRecordNum*2+RecordLen*2]) % 2 == 1:
			ExepectedContents = CacheFileContents[StartingRecordNum*2:StartingRecordNum*2+RecordLen*2] + "\x00"
		else:
			ExepectedContents = CacheFileContents[StartingRecordNum*2:StartingRecordNum*2+RecordLen*2]
		
		if erc == self.SUCCESS:
			if resp[5:] != ExepectedContents:
				print "Test_File_Read failed: Received contents didn't match expected contents"
				print "Expected Contents: " + str(CacheFileContents[StartingRecordNum*2:StartingRecordNum*2+RecordLen*2])
				print "Contents         : " + str(resp[5:])
				sys.exit(-1)
		else:
			if resp[5:] == ExepectedContents:
				print "Test_File_Read failed: Received contents unexpectedly matched expected contents"
				print "Expected Contents: " + str(CacheFileContents[StartingRecordNum*2:StartingRecordNum*2+RecordLen*2])
				print "Contents         : " + str(resp[5:])
				sys.exit(-1)


	def Test_Invalid_Function(self):

		# randomly choose to run this test
		if random.random() < self.Skip_Test_Threshold:
			return
		self.OneRun += 1

		if self.debug: print "Test_Invalid_Function"

		InvalidFunction = random.randint(0x20, 0x7f)

		Send_Invalid_Function(self.sock, self.TransID, self.UnitID, InvalidFunction)
		resp = Read_Response(self.sock)
		
		if ord(resp[1]) < 0x80:
			print "Test_Invalid_Function failed: Expected function code 0x{:02x} received 0x{:02x}".format(InvalidFunction+0x80, ord(resp[1]))
			sys.exit(-1)

		# check the exception code
		if ord(resp[2]) != self.INVALID_FUNC:
			print "Test_Invalid_Function failed: Expected function code 0x{:02x} received 0x{:02x}".format(self.INVALID_FUNC, ord(resp[2]))
			sys.exit(-1)
	

signal.signal(signal.SIGALRM, tooslow)
signal.alarm(5)
	
if len(sys.argv) < 1:
	print "poller <team#>"
	sys.exit(-1)

TEAM = sys.argv[1]
IP = "10.5."+TEAM+".2"
#IP = "10.3.1.155"
#print "Connecting to "+IP

o = ombdsu(IP)

while o.DidOneRun() < 10:
	signal.alarm(5)
	o.Test_Single_Coil_Write()
	o.Test_Multiple_Coil_Write()
	o.Test_Write_Multiple_Registers()
	o.Test_Write_Single_Register()
	o.Test_File_Read()
	o.Test_Invalid_Function()
	
# Test register read from RO area

# Test coil read from RO area

sys.exit(0)


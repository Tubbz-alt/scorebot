#!/usr/bin/env python

import random
import socket
import sys
import struct
import signal

def randstr( leng=6 ):
        x = ''
        for i in range(0, leng):
                x += struct.pack('B', random.randint( 0x41, 0x5b ))
        return x

def login(s):
	users = [ ['root', 'd41d8cd98f00b204e9800998ecf8427e'], ['c0mrade', '48bb6e862e54f2a795ffc4e541caed4d'], ['mitnick', '0625c3fc57758122569f6695af3579a1'], ['gonzalez', 'e8008e06909d08bccc344f7e56b1461b'], ['poulsen', '41d0e299ca1abeb2094852da042165c7'], [ 'solo', '28ca53d2b7bb4aa13549b4022c79dca1']]
	x = random.randint(0, len(users)-1)
	fuck = users[x]
	s.send('PERS')
	s.send(struct.pack('B', len(fuck[0])))
	s.send(fuck[0])
	y = s.recv(1024)
	if y.startswith('Yay for you') == False:
		print y
		print 'unexpected yay for you'
		return 1
	s.send('MOTS')
	s.send(struct.pack('B', len(fuck[1])))
	s.send(fuck[1])
	y = s.recv(1024)	
	if y.startswith('Thanks for all the ') == False:
		print 'unexpected thanks for all'
		return 1
	s.send('AUTH')
	y = s.recv(1024)
	if y.startswith('Auth successful') == False:
		print 'auth not succ'
		return 1

	return 0

def sendget( s ):
	q = randstr( )
	data = randstr( random.randint(0x80, 0x100))
	s.send('DNNR')
	s.send(struct.pack('H', len(q)))
	s.send(q)
	s.send( struct.pack('H', len(data)))
	s.send(data)
	y = s.recv(1024)
	if y.startswith('OOOh, good') == False:
		print y
		print 'unexpected response sendget'
		return 1
	s.send('PRND')
	s.send(struct.pack('H', len(q)))
	s.send(q)
	y = s.recv(1024)
	z = s.recv(1024)
	if y != data:
		print 'not same data'
		return 1
	if z.startswith('Yay for you') == False:
		print 'unexpected response yay for you'
		return 1
	 
	return 0

def mdircd( s ):
	x = randstr( random.randint(10,15))
	s.send('FAIT')
	s.send(struct.pack('H', len(x)))
	s.send( x )
	y = s.recv(1024)
	if y.startswith('Your wish') == False:
		print 'not what expected'
		return 1
	s.send('EVOL')
	s.send(struct.pack('H', len(x)))
	s.send(x)
	y = s.recv(1024)
	if y.startswith('Done for you') == False:
		print 'EVOL failed'
		return 1
	s.send('ANNU')
	y = s.recv(1024)
	if y.startswith('/' + x) == False:
		print 'annu failed'
		return 1	

	return 0

def listdir( s ):
	x = randstr( random.randint(10,15))
	s.send('FAIT')
	s.send(struct.pack('H', len(x)))
	s.send( x )
	y = s.recv(1024)
	if y.startswith('Your wish') == False:
		return 1
	s.send('NMMR')
	s.send(struct.pack('H', 0x01))
	s.send('/')
	y = s.recv(1024)

	if y.find(x) == -1:
		print 'NMMR failed'
		return 1
	
	return 0

def sendgetsize( s ):
	q = randstr( )
	data = randstr( random.randint(0x80, 0x300))
	s.send('DNNR')
	s.send(struct.pack('H', len(q)))
	s.send(q)
	s.send( struct.pack('H', len(data)))
	s.send(data)
	y = s.recv(1024)
	if y.startswith('OOOh, good') == False:
		print 'DNNR failed'
		return 1
	s.send('POID')
	s.send(struct.pack('H', len(q)))
	s.send(q)
	y = s.recv(1024)
	if int(y) != len(data):
		print 'unexpected data len'
		return 1
	
	return 0

def cmdloop( s ):
	y = random.randint( 10, 20 )
	retval = 0

	while ( retval == 0 and y > 0 ):
		x = random.randint( 0, 3 )

		x = 0
		if x == 0:
			retval = sendget( s )
			if retval != 0:
				print 'sendget failed'
		if x == 1:
			retval = mdircd( s )
			if retval != 0:
				print 'mdircd failed'
		if x == 2:
			retval = sendgetsize( s )
			if retval != 0:
				print 'sendgetsize failed'
		if x == 3:
			retval = listdir( s )
			if retval != 0:
				print 'listdir failed'
		y -= 1 

	sys.exit(retval)	

if __name__ == '__main__':
	signal.alarm(10)
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	try:
		s.connect((sys.argv[1], 7272))
	except:
		print "connect failed"
		sys.exit(1)

	print s.recv(1024)
	if login( s ) != 0:
		print 'login failed'
		sys.exit(1)	
	else:
		print 'login success'

	cmdloop( s )
